{"ast":null,"code":"var _jsxFileName = \"/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { FaCommentDots } from 'react-icons/fa';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (input.trim() !== '') {\n      const userMessage = {\n        text: input,\n        sender: 'user'\n      };\n      const newMessages = [...messages, userMessage];\n      setMessages(newMessages);\n      try {\n        const botResponse = await fetchGeminiResponse(input);\n        const botMessage = {\n          text: botResponse,\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error('Error fetching response:', error);\n        const errorMessage = {\n          text: 'Oops, something went wrong. Please try again.',\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      }\n      setInput('');\n    }\n  };\n  const fetchGeminiResponse = async userInput => {\n    try {\n      const response = await fetch('https://gemini.googleapis.com/v1/conversations:generateMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer YOUR_API_KEY` // Replace with actual key or token\n        },\n        body: JSON.stringify({\n          prompt: userInput,\n          maxTokens: 100,\n          temperature: 0.7\n        })\n      });\n      if (!response.ok) {\n        const errorDetails = await response.text();\n        console.error('Error details:', errorDetails);\n        throw new Error(`Failed to fetch response from Gemini API. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.message || 'Sorry, I couldn’t find an answer to that.';\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-button\",\n      onClick: toggleChat,\n      children: /*#__PURE__*/_jsxDEV(FaCommentDots, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: handleInputChange,\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"Gh4s1GdJuG5uIMQtVEZqGMQgaRI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","FaCommentDots","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","input","setInput","toggleChat","handleInputChange","event","target","value","handleSendMessage","trim","userMessage","text","sender","newMessages","botResponse","fetchGeminiResponse","botMessage","prevMessages","error","console","errorMessage","userInput","response","fetch","method","headers","body","JSON","stringify","prompt","maxTokens","temperature","ok","errorDetails","Error","status","data","json","message","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { FaCommentDots } from 'react-icons/fa';\nimport '../styles/Chatbot.css';\n\n\nconst Chatbot = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleSendMessage = async () => {\n    if (input.trim() !== '') {\n      const userMessage = { text: input, sender: 'user' };\n      const newMessages = [...messages, userMessage];\n      setMessages(newMessages);\n\n      try {\n        const botResponse = await fetchGeminiResponse(input);\n        const botMessage = { text: botResponse, sender: 'bot' };\n        setMessages((prevMessages) => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error('Error fetching response:', error);\n        const errorMessage = { text: 'Oops, something went wrong. Please try again.', sender: 'bot' };\n        setMessages((prevMessages) => [...prevMessages, errorMessage]);\n      }\n\n      setInput('');\n    }\n  };\n\n  const fetchGeminiResponse = async (userInput) => {\n    try {\n      const response = await fetch('https://gemini.googleapis.com/v1/conversations:generateMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer YOUR_API_KEY`, // Replace with actual key or token\n        },\n        body: JSON.stringify({ prompt: userInput, maxTokens: 100, temperature: 0.7 }),\n      });\n  \n      if (!response.ok) {\n        const errorDetails = await response.text();\n        console.error('Error details:', errorDetails);\n        throw new Error(`Failed to fetch response from Gemini API. Status: ${response.status}`);\n      }\n  \n      const data = await response.json();\n      return data.message || 'Sorry, I couldn’t find an answer to that.';\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      throw error;\n    }\n  };\n  \n  return (\n    <div className=\"chatbot-container\">\n      <button className=\"chatbot-button\" onClick={toggleChat}>\n        <FaCommentDots />\n      </button>\n\n      {isOpen && (\n        <div className=\"chatbot-window\">\n          <div className=\"chatbot-messages\">\n            {messages.map((msg, index) => (\n              <div key={index} className={`message ${msg.sender}`}>\n                {msg.text}\n              </div>\n            ))}\n          </div>\n          <div className=\"chatbot-input\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={handleInputChange}\n              placeholder=\"Type a message...\"\n            />\n            <button onClick={handleSendMessage}>Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}