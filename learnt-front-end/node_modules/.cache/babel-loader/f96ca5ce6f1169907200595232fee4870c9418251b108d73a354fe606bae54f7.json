{"ast":null,"code":"var _jsxFileName = \"/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Create a Generative AI instance using the API key from environment variables\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_API_KEY);\nconst model = genAI.getGenerativeModel({\n  model: 'gemini-1.5-flash'\n});\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n    const userMessage = {\n      role: 'user',\n      content: userInput\n    };\n\n    // Update messages with the user's input\n    setMessages([...messages, userMessage]);\n    setUserInput('');\n    try {\n      const response = await model.generateContent(userInput);\n      const aiMessage = {\n        role: 'ai',\n        content: response.response.text()\n      };\n      setMessages(prevMessages => [...prevMessages, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      const errorMessage = {\n        role: 'ai',\n        content: 'Sorry, I couldn’t process your request at this time.'\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"HfxAD2MO2c7ZhY4vijqw2/NvqkQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","GoogleGenerativeAI","jsxDEV","_jsxDEV","genAI","process","env","REACT_APP_API_KEY","model","getGenerativeModel","Chatbot","_s","messages","setMessages","userInput","setUserInput","handleSendMessage","trim","userMessage","role","content","response","generateContent","aiMessage","text","prevMessages","error","console","errorMessage","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Create a Generative AI instance using the API key from environment variables\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_API_KEY);\nconst model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    const userMessage = {\n      role: 'user',\n      content: userInput,\n    };\n\n    // Update messages with the user's input\n    setMessages([...messages, userMessage]);\n    setUserInput('');\n\n    try {\n      const response = await model.generateContent(userInput);\n      const aiMessage = {\n        role: 'ai',\n        content: response.response.text(),\n      };\n\n      setMessages((prevMessages) => [...prevMessages, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      const errorMessage = {\n        role: 'ai',\n        content: 'Sorry, I couldn’t process your request at this time.',\n      };\n      setMessages((prevMessages) => [...prevMessages, errorMessage]);\n    }\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.role}`}>\n            {msg.content}\n          </div>\n        ))}\n      </div>\n      <div className=\"input-area\">\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}