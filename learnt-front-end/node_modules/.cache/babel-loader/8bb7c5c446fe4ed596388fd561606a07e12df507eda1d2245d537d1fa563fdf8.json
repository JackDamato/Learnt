{"ast":null,"code":"var _jsxFileName = \"/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Initialize the GoogleGenerativeAI instance with your API key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst genAI = new GoogleGenerativeAI(\"AIzaSyDIZZrND0_STWySHR5GepbhMcB2qZkP5iA\");\nconst model = genAI.getGenerativeModel({\n  model: 'gemini-1.5-flash'\n});\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n    const userMessage = {\n      role: 'user',\n      content: userInput\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setUserInput('');\n    try {\n      console.log('Sending request to Google Generative AI with:', userInput);\n      const response = await model.generateContent(userInput);\n      const aiMessage = {\n        role: 'ai',\n        content: response.response.text()\n      };\n      console.log('Received response from Google Generative AI:', aiMessage);\n      setMessages(prevMessages => [...prevMessages, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      const errorMessage = {\n        role: 'ai',\n        content: 'Sorry, I couldn’t process your request at this time.'\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"HfxAD2MO2c7ZhY4vijqw2/NvqkQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","GoogleGenerativeAI","jsxDEV","_jsxDEV","genAI","model","getGenerativeModel","Chatbot","_s","messages","setMessages","userInput","setUserInput","handleSendMessage","trim","userMessage","role","content","prevMessages","console","log","response","generateContent","aiMessage","text","error","errorMessage","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Initialize the GoogleGenerativeAI instance with your API key\n\nconst genAI = new GoogleGenerativeAI(\"AIzaSyDIZZrND0_STWySHR5GepbhMcB2qZkP5iA\");\nconst model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    const userMessage = {\n      role: 'user',\n      content: userInput,\n    };\n\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n    setUserInput('');\n\n    try {\n      console.log('Sending request to Google Generative AI with:', userInput);\n      const response = await model.generateContent(userInput);\n\n      const aiMessage = {\n        role: 'ai',\n        content: response.response.text(),\n      };\n      console.log('Received response from Google Generative AI:', aiMessage);\n\n      setMessages((prevMessages) => [...prevMessages, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      const errorMessage = {\n        role: 'ai',\n        content: 'Sorry, I couldn’t process your request at this time.',\n      };\n      setMessages((prevMessages) => [...prevMessages, errorMessage]);\n    }\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.role}`}>\n            {msg.content}\n          </div>\n        ))}\n      </div>\n      <div className=\"input-area\">\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}