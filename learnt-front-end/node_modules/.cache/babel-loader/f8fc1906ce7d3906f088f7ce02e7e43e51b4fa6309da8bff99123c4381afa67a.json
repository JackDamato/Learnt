{"ast":null,"code":"var _jsxFileName = \"/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_API_KEY);\nconst model = genAI.getGenerativeModel({\n  model: 'gemini-1.5-flash'\n});\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const handleToggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n    const userMessage = {\n      role: 'user',\n      content: userInput\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setUserInput('');\n    try {\n      console.log('Sending request to Google Generative AI with:', userInput);\n      const response = await model.generateContent(userInput);\n      const aiMessage = {\n        role: 'ai',\n        content: response.response.text()\n      };\n      console.log('Received response from Google Generative AI:', aiMessage);\n      setMessages(prevMessages => [...prevMessages, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      const errorMessage = {\n        role: 'ai',\n        content: 'Sorry, I couldnâ€™t process your request at this time.'\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatbot-container ${isOpen ? 'open' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        onClick: handleToggleChatbot,\n        children: \"TutorBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.role}`,\n          children: msg.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-icon\",\n      onClick: handleToggleChatbot,\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"rhsWDET3SIUWZZrtNhTCE2G7f6g=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","GoogleGenerativeAI","jsxDEV","_jsxDEV","Fragment","_Fragment","genAI","process","env","REACT_APP_API_KEY","model","getGenerativeModel","Chatbot","_s","messages","setMessages","userInput","setUserInput","isOpen","setIsOpen","handleToggleChatbot","handleSendMessage","trim","userMessage","role","content","prevMessages","console","log","response","generateContent","aiMessage","text","error","errorMessage","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport '../styles/Chatbot.css';\n\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_API_KEY);\nconst model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleToggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    const userMessage = {\n      role: 'user',\n      content: userInput,\n    };\n\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n    setUserInput('');\n\n    try {\n      console.log('Sending request to Google Generative AI with:', userInput);\n      const response = await model.generateContent(userInput);\n\n      const aiMessage = {\n        role: 'ai',\n        content: response.response.text(),\n      };\n      console.log('Received response from Google Generative AI:', aiMessage);\n\n      setMessages((prevMessages) => [...prevMessages, aiMessage]);\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      const errorMessage = {\n        role: 'ai',\n        content: 'Sorry, I couldnâ€™t process your request at this time.',\n      };\n      setMessages((prevMessages) => [...prevMessages, errorMessage]);\n    }\n  };\n\n  return (\n    <>\n      <div className={`chatbot-container ${isOpen ? 'open' : ''}`}>\n        <div className=\"chatbot-header\" onClick={handleToggleChatbot}>\n          TutorBot\n        </div>\n        <div className=\"chatbot-messages\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.role}`}>\n              {msg.content}\n            </div>\n          ))}\n        </div>\n        <div className=\"chatbot-input-area\">\n          <input\n            type=\"text\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button onClick={handleSendMessage}>Send</button>\n        </div>\n      </div>\n      <div className=\"chatbot-icon\" onClick={handleToggleChatbot}>\n        ðŸ’¬\n      </div>\n    </>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}