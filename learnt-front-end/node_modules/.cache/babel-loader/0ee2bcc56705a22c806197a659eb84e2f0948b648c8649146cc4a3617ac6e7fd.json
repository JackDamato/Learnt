{"ast":null,"code":"var _jsxFileName = \"/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { FaCommentDots } from 'react-icons/fa';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (input.trim() !== '') {\n      const userMessage = {\n        text: input,\n        sender: 'user'\n      };\n      const newMessages = [...messages, userMessage];\n      setMessages(newMessages);\n      try {\n        const botResponse = await fetchGeminiResponse(input);\n        const botMessage = {\n          text: botResponse,\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error('Error fetching response:', error);\n        const errorMessage = {\n          text: 'Oops, something went wrong. Please try again.',\n          sender: 'bot'\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      }\n      setInput('');\n    }\n  };\n  const fetchGeminiResponse = async userInput => {\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    const apiUrl = 'https://gemini.googleapis.com/v1/conversations:generateMessage'; // Replace with the actual endpoint if different\n\n    const requestBody = {\n      prompt: userInput,\n      maxTokens: 100,\n      // Adjust as needed for response length\n      temperature: 0.7 // Controls the randomness of responses\n    };\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch response from Gemini API');\n    }\n    const data = await response.json();\n    return data.message || 'Sorry, I couldn’t find an answer to that.';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-button\",\n      onClick: toggleChat,\n      children: /*#__PURE__*/_jsxDEV(FaCommentDots, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: handleInputChange,\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"Gh4s1GdJuG5uIMQtVEZqGMQgaRI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","FaCommentDots","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","input","setInput","toggleChat","handleInputChange","event","target","value","handleSendMessage","trim","userMessage","text","sender","newMessages","botResponse","fetchGeminiResponse","botMessage","prevMessages","error","console","errorMessage","userInput","apiKey","process","env","REACT_APP_GEMINI_API_KEY","apiUrl","requestBody","prompt","maxTokens","temperature","response","fetch","method","mode","headers","body","JSON","stringify","ok","Error","data","json","message","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["/workspaces/Learnt/learnt-front-end/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { FaCommentDots } from 'react-icons/fa';\nimport '../styles/Chatbot.css';\n\nconst Chatbot = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleSendMessage = async () => {\n    if (input.trim() !== '') {\n      const userMessage = { text: input, sender: 'user' };\n      const newMessages = [...messages, userMessage];\n      setMessages(newMessages);\n\n      try {\n        const botResponse = await fetchGeminiResponse(input);\n        const botMessage = { text: botResponse, sender: 'bot' };\n        setMessages((prevMessages) => [...prevMessages, botMessage]);\n      } catch (error) {\n        console.error('Error fetching response:', error);\n        const errorMessage = { text: 'Oops, something went wrong. Please try again.', sender: 'bot' };\n        setMessages((prevMessages) => [...prevMessages, errorMessage]);\n      }\n\n      setInput('');\n    }\n  };\n\n  const fetchGeminiResponse = async (userInput) => {\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    const apiUrl = 'https://gemini.googleapis.com/v1/conversations:generateMessage'; // Replace with the actual endpoint if different\n\n    const requestBody = {\n      prompt: userInput,\n      maxTokens: 100, // Adjust as needed for response length\n      temperature: 0.7, // Controls the randomness of responses\n    };\n\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch response from Gemini API');\n    }\n\n    const data = await response.json();\n    return data.message || 'Sorry, I couldn’t find an answer to that.';\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <button className=\"chatbot-button\" onClick={toggleChat}>\n        <FaCommentDots />\n      </button>\n\n      {isOpen && (\n        <div className=\"chatbot-window\">\n          <div className=\"chatbot-messages\">\n            {messages.map((msg, index) => (\n              <div key={index} className={`message ${msg.sender}`}>\n                {msg.text}\n              </div>\n            ))}\n          </div>\n          <div className=\"chatbot-input\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={handleInputChange}\n              placeholder=\"Type a message...\"\n            />\n            <button onClick={handleSendMessage}>Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}